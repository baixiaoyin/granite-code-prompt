{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [],
   "source": [
    "from dotenv import load_dotenv\n",
    "import os, json\n",
    "import requests\n",
    "\n",
    "load_dotenv()\n",
    "api_key = os.getenv(\"API_KEY\", None)\n",
    "project_id = os.getenv(\"PROJECT_ID\", None)\n",
    "ibm_cloud_iam_url = os.getenv(\"IAM_IBM_CLOUD_URL\", None)\n",
    "\n",
    "creds = {\n",
    "    \"url\"    : \"https://us-south.ml.cloud.ibm.com\",\n",
    "    \"apikey\" : api_key\n",
    "}\n",
    "\n",
    "params = {\n",
    "    \"decoding_method\":\"greedy\",\n",
    "    \"max_new_tokens\":3000,\n",
    "    \"min_new_tokens\":1,\n",
    "    # \"temperature\":0.1,\n",
    "    \"top_k\":50,\n",
    "    \"top_p\":1,\n",
    "     \"repetition_penalty\": 1.1,\n",
    "    \"stop_sequences\":[\"```\",\"<|user|>\",\"<|assistant|>\"],\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Prepare the payload and headers\n",
    "payload = {\n",
    "    \"grant_type\": \"urn:ibm:params:oauth:grant-type:apikey\",\n",
    "    \"apikey\": api_key\n",
    "}\n",
    "headers = {\n",
    "    'Content-Type': \"application/x-www-form-urlencoded\"\n",
    "}\n",
    "\n",
    "# Make a POST request while ignoring SSL certificate verification\n",
    "try:\n",
    "    response = requests.post(f\"https://{ibm_cloud_iam_url}/identity/token\", data=payload, headers=headers, verify=False)\n",
    "    \n",
    "    # Check if the request was successful\n",
    "    response.raise_for_status()\n",
    "\n",
    "    # Parse the JSON response\n",
    "    decoded_json = response.json()\n",
    "    access_token = decoded_json[\"access_token\"]\n",
    "    # print(f\"Access Token: {access_token}\")\n",
    "except requests.exceptions.RequestException as e:\n",
    "    print(f\"An error occurred: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "\n",
    "GRANITE_3B_CODE_INSTRUCT = \"ibm/granite-3b-code-instruct\"\n",
    "GRANITE_8B_CODE_INSTRUCT = \"ibm/granite-8b-code-instruct\"\n",
    "GRANITE_20B_CODE_INSTRUCT = \"ibm/granite-20b-code-instruct\"\n",
    "GRANITE_34B_CODE_INSTRUCT = \"ibm/granite-34b-code-instruct\"\n",
    "GRANITE_3_8B_INSTRUCT = \"ibm/granite-3-8b-instruct\"\n",
    "\n",
    "def watsonx_code_gen(prompt,model_id):\n",
    "\n",
    "    url = \"https://us-south.ml.cloud.ibm.com/ml/v1/text/generation_stream?version=2023-05-29\"\n",
    "\n",
    "    body = {\n",
    "        \"input\": prompt,\n",
    "        \"parameters\": params,\n",
    "        \"model_id\": model_id,\n",
    "        \"project_id\": project_id\n",
    "    }\n",
    "\n",
    "    headers = {\n",
    "        \"Accept\": \"application/json\",\n",
    "        \"Content-Type\": \"application/json\",\n",
    "        \"Authorization\": f\"Bearer {access_token}\"\n",
    "    }\n",
    "\n",
    "    response = requests.post(\n",
    "        url,\n",
    "        headers=headers,\n",
    "        json=body,\n",
    "        stream=True\n",
    "    )\n",
    "\n",
    "    if response.status_code != 200:\n",
    "        raise Exception(\"Non-200 response: \" + str(response.text))\n",
    "\n",
    "    answer = \"\"\n",
    "    # Stream the response\n",
    "    for line in response.iter_lines():\n",
    "        if line:  # Ensure the line is not empty\n",
    "            decoded_line = line.decode(\"utf-8\").strip()\n",
    "            \n",
    "            # Check if the line starts with \"data: \"\n",
    "            if decoded_line.startswith(\"data: \"):\n",
    "                json_data = decoded_line[len(\"data: \"):]  # Remove the \"data: \" prefix\n",
    "                \n",
    "                try:\n",
    "                    # Attempt to load the JSON data\n",
    "                    data = json.loads(json_data)\n",
    "                    generated_text = data.get(\"results\", \"\")\n",
    "                    answer += generated_text[0][\"generated_text\"]\n",
    "                    # print(generated_text[0][\"generated_text\"],end=\"\")  # Print or process the generated text as needed\n",
    "                except json.JSONDecodeError:\n",
    "                    print(\"Failed to decode JSON:\", json_data)\n",
    "                except Exception as e:\n",
    "                    print(\"An error occurred:\", e)\n",
    "\n",
    "    return answer\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "sample_code = \"\"\"import java.util.*;\n",
    "\n",
    "public class Main {\n",
    "\n",
    "    public static void main(String[] args) {\n",
    "        try (Scanner in = new Scanner(System.in)) {\n",
    "            int n = in.nextInt();\n",
    "            int[] a = new int[n];\n",
    "            for(int a_i=0; a_i < n; a_i++){\n",
    "                a[a_i] = in.nextInt();\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "\n",
    "    public void calculate(int[] a) {\n",
    "        int sum = 0;\n",
    "        for (int i = 0; i < a.length; i++) {\n",
    "            sum += a[i];\n",
    "        }\n",
    "        System.out.println(sum);\n",
    "    }\n",
    "\n",
    "    public void print(int[] a) {\n",
    "        for (int i = 0; i < a.length; i++) {\n",
    "            System.out.println(a[i]);\n",
    "        }\n",
    "    }\n",
    "\n",
    "    public void sort(int[] a) {\n",
    "        Arrays.sort(a);\n",
    "        double median;\n",
    "        if (a.length % 2 == 0) {\n",
    "            median = (a[a.length / 2 - 1] + a[a.length / 2]) / 2.0;\n",
    "        } else {\n",
    "            median = a[a.length / 2];\n",
    "        }\n",
    "    }\n",
    "}\"\"\"\n",
    "\n",
    "bad_code = \"\"\"import java.util.*;\n",
    "\n",
    "public class Main {\n",
    "\n",
    "    public static void main(String[] args) {\n",
    "        try (Scanner in = new Scanner(System.in)) {\n",
    "            int n = in.nextInt();\n",
    "    }\n",
    "\n",
    "    public void calculate(int[] a) {\n",
    "        int sum = 0;\n",
    "        for (int i = 0; \n",
    "        }\n",
    "        System.out.println(sum);\n",
    "    }\n",
    "\n",
    "    public void print(int[] a) {\n",
    "        for (int i = 0; System.out.println(a[i]);\n",
    "        }\n",
    "    }\n",
    "\n",
    "    public void sort(int[] a) {\n",
    "        Arrays.sort(a);\n",
    "        double me\n",
    "        if (a.length % 2 == 0) {\n",
    "           th / 2 - 1] + a[a.length / 2]) / 2.0;\n",
    "        } else {\n",
    "            median = a[a.len\n",
    "        }\n",
    "    }\n",
    "}\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "model_id = GRANITE_3_8B_INSTRUCT\n",
    "language = \"java\"\n",
    "documentframework = \"javadoc\"\n",
    "testframework = \"junit\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate javadoc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "/**\n",
      " * This class represents the main application that reads an array of integers from the user,\n",
      " * calculates the sum of its elements, prints each element, sorts the array, and finds the median.\n",
      " */\n",
      "public class Main {\n",
      "\n",
      "    /**\n",
      "     * The main method that reads an array of integers from the user, calculates the sum of its elements,\n",
      "     * prints each element, sorts the array, and finds the median.\n",
      "     * @param args command line arguments\n",
      "     */\n",
      "    public static void main(String[] args) {\n",
      "        try (Scanner in = new Scanner(System.in)) {\n",
      "            int n = in.nextInt(); // read the number of elements in the array\n",
      "            int[] a = new int[n]; // create an array to store the elements\n",
      "            for(int a_i=0; a_i < n; a_i++){ // read the elements of the array\n",
      "                a[a_i] = in.nextInt();\n",
      "            }\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculates the sum of the elements in the given array.\n",
      "     * @param a the array of integers\n",
      "     */\n",
      "    public void calculate(int[] a) {\n",
      "        int sum = 0; // initialize the sum variable\n",
      "        for (int i = 0; i < a.length; i++) { // iterate over the array\n",
      "            sum += a[i]; // add the current element to the sum\n",
      "        }\n",
      "        System.out.println(sum); // print the sum\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Prints each element of the given array.\n",
      "     * @param a the array of integers\n",
      "     */\n",
      "    public void print(int[] a) {\n",
      "        for (int i = 0; i < a.length; i++) { // iterate over the array\n",
      "            System.out.println(a[i]); // print the current element\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sorts the given array in ascending order and finds the median.\n",
      "     * @param a the array of integers\n",
      "     */\n",
      "    public void sort(int[] a) {\n",
      "        Arrays.sort(a); // sort the array in ascending order\n",
      "        double median; // declare the median variable\n",
      "        if (a.length % 2 == 0) { // check if the length of the array is even\n",
      "            median = (a[a.length / 2 - 1] + a[a.length / 2]) / 2.0; // calculate the median as the average of the two middle elements\n",
      "        } else {\n",
      "            median = a[a.length / 2]; // calculate the median as the middle element\n",
      "        }\n",
      "    }\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prompt = f\"\"\"<|user|>\n",
    "generate {documentframework} document for the {language} provided.\n",
    "-generate the {language} code only.\n",
    "{language}: `{sample_code}`\n",
    "<|assistant|>\n",
    "```{language}\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id).replace(\"```\",\"\")\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "score, review and improve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The provided Java code is a simple program that reads an array of integers from the user, calculates the sum of its elements, prints each element on a new line, sorts the array, and then calculates and prints the median value. The code is functional and follows basic Java syntax and conventions. However, there are several areas where the code could be improved in terms of object orientation, readability, and maintainability.\n",
      "\n",
      "Here's a breakdown of the code:\n",
      "\n",
      "1. The `Main` class contains the `main` method, which is the entry point of the program. It reads an integer `n` from the user, creates an array of integers `a` of size `n`, and then calls the `calculate`, `print`, and `sort` methods on this array.\n",
      "2. The `calculate` method calculates the sum of all elements in the array and prints it.\n",
      "3. The `print` method prints each element of the array on a new line.\n",
      "4. The `sort` method sorts the array using the `Arrays.sort()` method and then calculates and prints the median value. If the array has an even number of elements, the median is the average of the two middle elements. Otherwise, it's the middle element.\n",
      "\n",
      "Improvements:\n",
      "\n",
      "1. Object Orientation: The code could be made more object-oriented by creating a separate class for the array operations. This class could have methods for calculating the sum, printing the elements, sorting the array, and calculating the median. This would make the code more modular and easier to maintain.\n",
      "2. Readability: The code could be made more readable by adding comments to explain what each method does and by using more descriptive variable names. For example, instead of `a`, the array could be named `numbers`.\n",
      "3. Performance: The `sort` method currently sorts the entire array, even though it only needs to find the median. A more efficient approach would be to use a selection algorithm to find the median without sorting the entire array.\n",
      "4. Error Handling: The code currently doesn't handle any errors that might occur when reading the input or when the array is empty. Adding error handling code would make the program more robust.\n",
      "\n",
      "Overall, I would give this code a score of 6 out of 10 for quality. While it's functional and follows basic Java syntax and conventions, there are several areas where it could be improved in terms of object orientation, readability, performance, and error handling.\n"
     ]
    }
   ],
   "source": [
    "prompt = f\"\"\"<|user|>\n",
    "you are {language} expert. you need to review the following {language} code. \n",
    "-please understand the {language} code provided in detail.\n",
    "-please review the code in completeness, logic, performance and quality.\n",
    "-make it more object oriented.\n",
    "-give a score out of 10 for the quality of code.\n",
    "-please provide constructive suggestion in detail.\n",
    "-generate the review and suggestion only.\n",
    "{language} code: `{sample_code}`\n",
    "-DONT generate the improve code directly.\n",
    "<|assistant|>\n",
    "score and review:\"\"\"\n",
    "\n",
    "suggestion = watsonx_code_gen(prompt,model_id)\n",
    "print(suggestion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "import java.util.*;\n",
      "\n",
      "public class ArrayOperations {\n",
      "\n",
      "    private int[] numbers;\n",
      "\n",
      "    public ArrayOperations(int[] numbers) {\n",
      "        this.numbers = numbers;\n",
      "    }\n",
      "\n",
      "    public double calculateSum() {\n",
      "        int sum = 0;\n",
      "        for (int number : numbers) {\n",
      "            sum += number;\n",
      "        }\n",
      "        return sum;\n",
      "    }\n",
      "\n",
      "    public void printNumbers() {\n",
      "        for (int number : numbers) {\n",
      "            System.out.println(number);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void sortNumbers() {\n",
      "        Arrays.sort(numbers);\n",
      "    }\n",
      "\n",
      "    public double calculateMedian() {\n",
      "        int size = numbers.length;\n",
      "        if (size % 2 == 0) {\n",
      "            return (numbers[size / 2 - 1] + numbers[size / 2]) / 2.0;\n",
      "        } else {\n",
      "            return numbers[size / 2];\n",
      "        }\n",
      "    }\n",
      "}\n",
      "\n",
      "public class Main {\n",
      "\n",
      "    public static void main(String[] args) {\n",
      "        try (Scanner in = new Scanner(System.in)) {\n",
      "            int n = in.nextInt();\n",
      "            if (n <= 0) {\n",
      "                System.out.println(\"Error: Number of elements must be positive.\");\n",
      "                return;\n",
      "            }\n",
      "            int[] numbers = new int[n];\n",
      "            for(int i = 0; i < n; i++){\n",
      "                numbers[i] = in.nextInt();\n",
      "            }\n",
      "            ArrayOperations arrayOperations = new ArrayOperations(numbers);\n",
      "            System.out.println(\"Sum: \" + arrayOperations.calculateSum());\n",
      "            arrayOperations.printNumbers();\n",
      "            arrayOperations.sortNumbers();\n",
      "            System.out.println(\"Median: \" + arrayOperations.calculateMedian());\n",
      "        } catch (Exception e) {\n",
      "            System.err.println(\"Error: \" + e.getMessage());\n",
      "        }\n",
      "    }\n",
      "}\n",
      "```\n"
     ]
    }
   ],
   "source": [
    "prompt = f\"\"\"<|user|>\n",
    "improve the {language} provided base on the review provided.\n",
    "-understand the review suggestion in detail.\n",
    "-adopt the review suggestion if applicable.\n",
    "###\n",
    "original {language} code: `{sample_code}`\n",
    "review suggestion: `{suggestion}`\n",
    "<|assistant|>\n",
    "improved {language}\n",
    "```{language}\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id).replace(\"```\",\"\")\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "fix bad code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "import java.util.*;\n",
      "\n",
      "public class Main {\n",
      "\n",
      "    public static void main(String[] args) {\n",
      "        try (Scanner in = new Scanner(System.in)) {\n",
      "            int n = in.nextInt();\n",
      "            int[] a = new int[n];\n",
      "            for (int i = 0; i < n; i++) {\n",
      "                a[i] = in.nextInt();\n",
      "            }\n",
      "            sort(a);\n",
      "            calculate(a);\n",
      "            print(a);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void calculate(int[] a) {\n",
      "        int sum = 0;\n",
      "        for (int i = 0; i < a.length; i++) { // fixed: loop condition\n",
      "            sum += a[i];\n",
      "        }\n",
      "        System.out.println(sum);\n",
      "    }\n",
      "\n",
      "    public void print(int[] a) {\n",
      "        for (int i = 0; i < a.length; i++) { // fixed: loop condition\n",
      "            System.out.println(a[i]);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    public void sort(int[] a) {\n",
      "        Arrays.sort(a);\n",
      "        double median;\n",
      "        if (a.length % 2 == 0) { // fixed: corrected condition\n",
      "            median = (a[a.length / 2 - 1] + a[a.length / 2]) / 2.0;\n",
      "        } else {\n",
      "            median = a[a.length / 2]; // fixed: corrected index\n",
      "        }\n",
      "    }\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prompt = f\"\"\"<|user|>\n",
    "fix the {language} provided.\n",
    "-understand the review suggestion in detail.\n",
    "-identify if any problem.\n",
    "-fix the problem if any.\n",
    "-add explanation as inline comment.\n",
    "\n",
    "###\n",
    "{language}: `{bad_code}`\n",
    "<|assistant|>\n",
    "fixed version with inline comment at the point it fix.\n",
    "```{language}\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id).replace(\"```\",\"\")\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate diagram"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "graph TD\n",
      "    A[Main] --> B[main]\n",
      "    B --> C[try-with-resources]\n",
      "    C --> D[Scanner in]\n",
      "    D --> E[nextInt]\n",
      "    E --> F[n]\n",
      "    F --> G[new int[n]]\n",
      "    G --> H[calculate]\n",
      "    H --> I[sum]\n",
      "    I --> J[for loop]\n",
      "    J --> K[a[i]]\n",
      "    K --> L[sum += a[i]]\n",
      "    M[print] --> N[for loop]\n",
      "    N --> O[a[i]]\n",
      "    P[sort] --> Q[Arrays.sort]\n",
      "    Q --> R[if-else]\n",
      "    R --> S[a.length % 2 == 0]\n",
      "    S --> T[median = (a[a.length / 2 - 1] + a[a.length / 2]) / 2.0]\n",
      "    U[else] --> V[median = a[a.length / 2]]\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prompt = f\"\"\"<|user|>\n",
    "generate diagram for the {language} code provided.\n",
    "-understand the review suggestion in detail.\n",
    "-use simple name for node.\n",
    "-generate in mermaid.\n",
    "-dont repeating.\n",
    "{language}: `{sample_code}`\n",
    "<|assistant|>\n",
    "```mermaid\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id).replace(\"```\",\"\")\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "conversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "import array as arr\n",
      "\n",
      "def main():\n",
      "    n = int(input())\n",
      "    a = arr.array('i', [0] * n)\n",
      "    for i in range(n):\n",
      "        a[i] = int(input())\n",
      "    calculate(a)\n",
      "    sort(a)\n",
      "    print(median(a))\n",
      "\n",
      "def calculate(a):\n",
      "    sum = 0\n",
      "    for i in range(len(a)):\n",
      "        sum += a[i]\n",
      "    print(sum)\n",
      "\n",
      "def sort(a):\n",
      "    a.sort()\n",
      "    if len(a) % 2 == 0:\n",
      "        median = (a[len(a) // 2 - 1] + a[len(a) // 2]) / 2.0\n",
      "    else:\n",
      "        median = a[len(a) // 2]\n",
      "    print(median)\n",
      "\n",
      "def median(a):\n",
      "    return sort(a)[len(a) // 2]\n",
      "\n",
      "if __name__ == \"__main__\":\n",
      "    main()\n",
      "\n"
     ]
    }
   ],
   "source": [
    "target_language = \"python\"\n",
    "\n",
    "prompt = f\"\"\"<|user|>\n",
    "rewrite the {language} code provided to {target_language}.\n",
    "-understand the code provided in detail.\n",
    "-understand how to map technology and syntax to the target {target_language} langauge.\n",
    "{language}: `{sample_code}`\n",
    "<|assistant|>\n",
    "```{target_language}\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id).replace(\"```\",\"\")\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/**\n",
      " * IBM documentation style of Class, with parameter of args in String[].\n",
      " */\n",
      "public class Main {\n",
      "\n",
      "    /**\n",
      "     * @param args ABCDEF\n",
      "     */\n",
      "    public static void main(String[] args) {\n",
      "        // Read input from user\n",
      "        try (Scanner in = new Scanner(System.in)) {\n",
      "            int n = in.nextInt();\n",
      "            int[] a = new int[n];\n",
      "            for(int a_i=0; a_i < n; a_i++){\n",
      "                a[a_i] = in.nextInt();\n",
      "            }\n",
      "\n",
      "            // Calculate and print the sum of the array elements\n",
      "            calculate(a);\n",
      "\n",
      "            // Print each element of the array\n",
      "            print(a);\n",
      "\n",
      "            // Sort the array and print the median value\n",
      "            sort(a);\n",
      "            System.out.println(\"Median: \" + median);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Calculates the sum of the array elements.\n",
      "     *\n",
      "     * @param a The array to calculate the sum of.\n",
      "     */\n",
      "    public void calculate(int[] a) {\n",
      "        int sum = 0;\n",
      "        for (int i = 0; i < a.length; i++) {\n",
      "            sum += a[i];\n",
      "        }\n",
      "        System.out.println(\"Sum: \" + sum);\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Prints each element of the array.\n",
      "     *\n",
      "     * @param a The array to print.\n",
      "     */\n",
      "    public void print(int[] a) {\n",
      "        for (int i = 0; i < a.length; i++) {\n",
      "            System.out.println(a[i]);\n",
      "        }\n",
      "    }\n",
      "\n",
      "    /**\n",
      "     * Sorts the array and prints the median value.\n",
      "     *\n",
      "     * @param a The array to sort and find the median of.\n",
      "     */\n",
      "    public void sort(int[] a) {\n",
      "        Arrays.sort(a);\n",
      "        double median;\n",
      "        if (a.length % 2 == 0) {\n",
      "            median = (a[a.length / 2 - 1] + a[a.length / 2]) / 2.0;\n",
      "        } else {\n",
      "            median = a[a.length / 2];\n",
      "        }\n",
      "        System.out.println(\"Median: \" + median);\n",
      "    }\n",
      "}\n",
      "\n"
     ]
    }
   ],
   "source": [
    "prompt = f\"\"\"<|user|>\n",
    "apply the naming convention for the code as example. \n",
    "code: `void testing(){{\n",
    "    System.out.print(\"hello\");\n",
    "}}`\n",
    "<|assistant|>\n",
    "```{language}\n",
    "/**\n",
    " * IBM documentation style of Class, with parameter of args in String[].\n",
    " */\n",
    "public class MainABC {{\n",
    "\n",
    "    /**\n",
    "     * @param args ABCDEF\n",
    "     */\n",
    "    public void testingDEF(String[] args) {{\n",
    "        System.out.println(\"Hello\");\n",
    "    }}\n",
    "}}\n",
    "```\n",
    "<|user|>\n",
    "generate document for the code. \n",
    "code: `{sample_code}`\n",
    "<|assistant|>\n",
    "```{language}\n",
    "\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id).replace(\"```\",\"\")\n",
    "print(answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate optimization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = f\"\"\"Question:\n",
    "generate a improvement suggestion for the {language} code provided.\n",
    "-understand the {language} code in detail.\n",
    "-improve object oriented structure.\n",
    "-improve the naming convension, give more meaningful name.\n",
    "-improve performance that leverage HPC library if applicable.\n",
    "-adopt the improvement suggestion.\n",
    "{language}: `{sample_code}`\n",
    "Answer:\"\"\"\n",
    "\n",
    "suggestion = watsonx_code_gen(prompt,model_id)\n",
    "\n",
    "prompt = f\"\"\"Question:\n",
    "generate a improved version base on the {language} code provided.\n",
    "-understand the {language} code in detail.\n",
    "-adopt the improvement suggestion.\n",
    "{language}: `{sample_code}`\n",
    "suggestion: `{suggestion}`\n",
    "Answer:\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate api definition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = f\"\"\"Question:\n",
    "generate a API definition in swagger for the {language} code provided.\n",
    "{language}: `{sample_code}`\n",
    "Answer:\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate test case"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = f\"\"\"Question:\n",
    "generate Test Cases in {testframework} for the {language} code provided.\n",
    "-focus on boundary cases.\n",
    "-focus on exception handling\n",
    "{language}: `{sample_code}`\n",
    "Answer:\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate interface"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = f\"\"\"Question:\n",
    "generate {language} interface version base on the {language} code provided.\n",
    "{language}: `{sample_code}`\n",
    "Answer:\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate build and deployment script"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = f\"\"\"Question:\n",
    "generate build and deployment script for the {language} code provided.\n",
    "-target environment be liberty on openshift.\n",
    "{language}: `{sample_code}`\n",
    "Answer:\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "HPC optimize"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = f\"\"\"Question:\n",
    "generate a prompt to enhance the {language} code provided.\n",
    "-the {language} will target for high performance computing.\n",
    "-consider use CUDA if applicable.\n",
    "{language}: `{sample_code}`\n",
    "Answer:\"\"\"\n",
    "\n",
    "suggestion = watsonx_code_gen(prompt,model_id)\n",
    "\n",
    "prompt = f\"\"\"Question:\n",
    "enhance the {language} code provided base on the suggestion.\n",
    "-target environment be with Nvidia GPU.\n",
    "suggestion: `{suggestion}`\n",
    "{language}: `{sample_code}`\n",
    "Answer:\n",
    "enhance version:\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "code completion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "partial_code = \"\"\"public static void main(String[] args) {\n",
    "        try (Scanner in = new Scanner(System.in)) {\n",
    "            int n = in.nextInt();\"\"\"\n",
    "\n",
    "prompt = f\"\"\"Question:\n",
    "please generate the next few line of {language} code after the code provided provided.\n",
    "-please understand the name of the function if any.\n",
    "-please understand the comment if any.\n",
    "-please generate high quality {language} code.\n",
    "-end the generation with double newline.\n",
    "System:\n",
    "code = `{partial_code}\n",
    "`\n",
    "Answer:\n",
    "next line:```{language}\n",
    "\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "generate explanation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "prompt = f\"\"\"Question:\n",
    "Please provide a detailed explanation for the following {language} code:\n",
    "-ensure have new line after every full stop.\n",
    "<<SYS>>\n",
    "code: `{sample_code}`\n",
    "<</SYS>>\n",
    "Answer:\n",
    "explanation:\n",
    "\"\"\"\n",
    "\n",
    "answer = watsonx_code_gen(prompt,model_id)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "style alignment with fewshot learning"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
